---
## Task file for setup/teardown AWS resources for aws_ssm integration testing
- name: Install Session Manager Plugin for Debian/Ubuntu
  include_tasks: debian.yml
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"
  tags: setup_infra

- name: Install Session Manager Plugin for RedHat/Amazon
  include_tasks: redhat.yml
  when: ansible_distribution == "CentOS" or ansible_distribution == "RedHat" or ansible_distribution == "Amazon"
  tags: setup_infra

- name: Install Boto3
  pip:
    name: boto3
  tags: setup_infra

- name: Install Boto
  pip:
    name: boto
  tags: setup_infra

- name: Create IAM role
  iam:
    iam_type: role
    name: "{{iam_role_name}}{{ 600 | random }}"
    state: present
  register: role_output
  tags: setup_infra

- name: Setting fact for role name
  set_fact:
     random_role_name: "{{role_output.role_result.role_name}}"
  tags: setup_infra

- name: Assign a policy called SSM and S3 to the "{{iam_role_name}}"
  iam_policy:
    iam_type: role
    iam_name: "{{random_role_name}}"
    policy_name: "{{iam_policy_name}}{{ 600 | random }}"
    policy_document:  aws_ssm_integration_test_setup_teardown/files/custom_role.json
    state: present
  register: policy_name
  tags: setup_infra

- name: Setting fact for policy name
  set_fact:
    random_policy_name: "{{policy_name.policies[0]}}"
  tags: setup_infra

- pause:
    seconds: 10
  tags: setup_infra

- name: Create Linux ec2 instance
  ec2:
    instance_type: "{{instance_type}}"
    image: "{{linux_ami_id}}"
    wait: "yes"
    count: 1
    region: "{{aws_region}}"
    instance_profile_name: "{{random_role_name}}"
    instance_tags:
      Name: aws_ssm_integration_test_linux
    user_data: |
                 #!/bin/sh
                 sudo systemctl start amazon-ssm-agent
    state: present
  register: linux_output
  tags: setup_infra

- name: Create Windows ec2 instance
  ec2:
    instance_type: "{{instance_type}}"
    image: "{{windows_ami_id}}"
    wait: "yes"
    count: 1
    region: "{{aws_region}}"
    instance_profile_name: "{{random_role_name}}"
    instance_tags:
      Name: aws_ssm_integration_test_windows
    user_data: |
                <powershell>
                Restart-Service AmazonSSMAgent
                </powershell>
    state: present
  register: windows_output
  tags: setup_infra

- name: Wait for EC2 to be available
  wait_for_connection:
    delay: 300
  tags: setup_infra

- name: Setting fact for S3 bucket-name using EC2 instance-id
  set_fact:
    bucket_name: "{{linux_output.instance_ids[0]}}-{{windows_output.instance_ids[0]}}"
    linux_instance_id: "{{linux_output.instance_ids[0]}}"
    windows_instance_id: "{{windows_output.instance_ids[0]}}"
  tags: setup_infra

- name: Create bucket with instance id and rolename
  s3_bucket:
    name: "{{bucket_name}}"
  register: s3_output
  tags: setup_infra

- name: Create var_to_delete.yml
  template:
    dest: "{{playbook_dir}}/vars_to_delete.yml"
    src: vars_to_delete.yml.j2
  tags: setup_infra

- name: Create Inventory file for Linux host
  template:
    dest: "{{playbook_dir}}/inventory-linux.aws_ssm"
    src: inventory-linux.aws_ssm.j2
  tags: setup_infra

- name: Create Inventory file for Windows host
  template:
    dest: "{{playbook_dir}}/inventory-windows.aws_ssm"
    src: inventory-windows.aws_ssm.j2
  tags: setup_infra

- name: Include variable file to delete infra
  include_vars:  "{{playbook_dir}}/vars_to_delete.yml"
  tags: delete_infra

- name: S3 bucket Deletion
  aws_s3:
    bucket: "{{bucket_name}}"
    mode: delete
  tags: delete_infra

- name: Terminate EC2 instances that were previously launched
  ec2:
    state: 'absent'
    instance_ids:
      - "{{linux_instance_id}}"
      - "{{windows_instance_id}}"
    region: "{{aws_region}}"
  tags: delete_infra

- name: Delete IAM policy
  iam_policy:
    iam_type: role
    iam_name: "{{role_name_random}}"
    policy_name: "{{policy_name}}"
    policy_document:  aws_ssm_integration_test_setup_teardown/files/custom_role.json
    state: absent
  tags: delete_infra

- name: Delete IAM role
  iam:
    iam_type: role
    name: "{{role_name_random}}"
    state: absent
  tags: delete_infra
